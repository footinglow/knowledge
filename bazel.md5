# リポジトリ、ワークスペース、パッケージ、ターゲット

リポジトリ：
・ビルドで使用されるソースファイルがまとめられたもの
・ルートに境界マーカーファイルがある
　MODULE.bazel、REPO.bazel
 （レガシー コンテキストでは WORKSPACE、WORKSPACE.bazel）が配置されている

メインリポジトリ：
・Bazelコマンドが実行されているリポジトリ

ワークスペース：定義されたリポジトリのセット
・メインリポジトリと定義済みのすべての外部リポジトリのセットが含まれる
・歴史的には、リポジトリ＝ワークスペース＝メインリポジトリが混同されてきた

パッケージ：
・リポジトリを構成する主な単位
・関連ずるファイルと集まりと、出力アーティファクトの生成方法の仕様
・BUILDもしくはBUILD.bazelファイルのすべてのファイルと、その下のパッケージを除くサブディレクトリが含まれる

ターゲット：
・パッケージはターゲットのコンテナ
ターゲット━┳━ファイル━┳━ソースファイル：人の手で生成
　　　　　 ┃　 　　　 ┗━生成ファイル：ソースファイルから生成（＝派生ファイル＝出力ファイル）
　　　　　 ┗━ルール：入力ファイルと出力ファイルの関係を指定。他のルールを出力することもある。

ラベル：
　ターゲットの識別子
　@@はcanonical-repo-name　：　正しく正確なリポジトリ名称。一般的に不可解な文字列
　@は apparent-repo-name　 ：　誰が見てもそれだとわかる名前
@@myrepo//my/app/main:app_binary
 @myrepo//my/app/main:app_binary

同一リポジトリ内の場合、
        //my/app/main:app_binary
同一パッケージ内の場合は以下のどちらでも可
                      app_binary
                     :app_binary

パッケージ名の最後と、ターゲット名が同じ場合、コロン＋ターゲット名は省略可能なため以下の2つは同じ意味となる
 //my/app/lib
 //my/app/lib:lib

パッケージの指定方法の名称（知識として不要かも）
@@myrepo//my/app/main　：完全修飾パッケージ名
          my/app/main　：非修飾パッケージ名

パッケージのサブディレクトリにあるターゲットの指定方法
例）パッケージのルート(BUILDファイルがある）のディレクトリtestdataの下にターゲットがある場合
//my/app/main:testdata/input.txt

★注意：
・//my/appでappパッケージのすべてのターゲットを指定しているつもりかもしれないが、
　//my/appは//my/app:appと同じなので、appターゲットをひとつ指定しているだけである。

・相対ラベルを使用して、他のパッケージ内のターゲットを参照できない
　→リポジトリIDとパッケージ名を必ず指定すること

・@@//で始まるラベルはメインリポジトリへの参照で、外部リポジトリからも機能する
　外部リポジトリ：
　　@@//a/b/c　：メインリポジトリを参照
　　  //a/b/c　：外部リポジトリ自体を参照


ルールのBUILDファイルの書き方：
　cc_binary(                 : ルール名
      name = ["my_app"],    ：　ターゲット
      srcs = ["my_app.cc"],
      deps = [
           "//absl/base",
           "//absl/strings",
      ],
  )
